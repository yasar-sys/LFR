main.ino

void lineFollow(){

  int error, delSpeed;
  float P, D;
  error= readSensor();

  if(error== 420){

    // if(turn == 1){
    //   lastSensor=2;
    //   turn=0;
    // }

    if(lastSensor == 1) wheel(-leftBaseSpeed, rightBaseSpeed);

    else if(lastSensor == 2) wheel(leftBaseSpeed, -rightBaseSpeed);
  }

  else{

    P= kp * error;
    D= kd * (error -  prevError);

    delSpeed = P + D;

    wheel((leftBaseSpeed + delSpeed), (rightBaseSpeed - delSpeed));

    prevError = error;
    
  }

}


**‡¶è‡¶á ‡¶≤‡¶æ‡¶á‡¶® ‡¶´‡¶≤‡ßã‡ßü‡¶æ‡¶∞ ‡¶ï‡ßã‡¶°‡¶ü‡¶ø‡¶∞ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶è‡¶¨‡¶Ç ‡¶ï‡ßÄ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶≤‡ßá ‡¶ï‡ßÄ ‡¶π‡¶¨‡ßá:**

## üìù **‡¶ï‡ßã‡¶°‡ßá‡¶∞ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶Ö‡¶∞‡ßç‡¶•:**

```cpp
void lineFollow() {
  int error, delSpeed;       // ‡¶≠‡ßç‡¶Ø‡¶æ‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤ ‡¶°‡¶ø‡¶ï‡ßç‡¶≤‡ßá‡¶Ø‡¶º‡¶æ‡¶∞
  float P, D;                // PID ‡¶è‡¶∞ P ‡¶è‡¶¨‡¶Ç D ‡¶Ö‡¶Ç‡¶∂
  
  error = readSensor();      // ‡¶∏‡ßá‡¶®‡ßç‡¶∏‡¶∞ ‡¶•‡ßá‡¶ï‡ßá error ‡¶™‡¶°‡¶º‡¶æ
  
  if(error == 420) {         // ‡¶Ø‡¶¶‡¶ø error 420 ‡¶π‡¶Ø‡¶º (‡¶≤‡¶æ‡¶á‡¶® ‡¶π‡¶æ‡¶∞‡¶ø‡¶Ø‡¶º‡ßá ‡¶ó‡ßá‡¶õ‡ßá)
    
    // ‡¶Ø‡¶¶‡¶ø turn == 1 ‡¶π‡¶Ø‡¶º (‡¶ï‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶Ü‡¶â‡¶ü ‡¶ï‡¶∞‡¶æ)
    // lastSensor = 2 ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßã
    // turn = 0 ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßã
    
    if(lastSensor == 1) 
      wheel(-leftBaseSpeed, rightBaseSpeed);  // ‡¶¨‡¶æ‡¶Æ ‡¶¶‡¶ø‡¶ï‡ßá ‡¶ò‡ßÅ‡¶∞‡ßã
    
    else if(lastSensor == 2) 
      wheel(leftBaseSpeed, -rightBaseSpeed);  // ‡¶°‡¶æ‡¶® ‡¶¶‡¶ø‡¶ï‡ßá ‡¶ò‡ßÅ‡¶∞‡ßã
  }
  
  else {  // ‡¶≤‡¶æ‡¶á‡¶® ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶ó‡ßá‡¶õ‡ßá
    P = kp * error;          // Proportional ‡¶Ö‡¶Ç‡¶∂
    D = kd * (error - prevError); // Derivative ‡¶Ö‡¶Ç‡¶∂
    
    delSpeed = P + D;        // ‡¶Æ‡ßã‡¶ü correction
    
    // ‡¶Æ‡ßã‡¶ü‡¶∞ ‡¶®‡¶ø‡¶Ø‡¶º‡¶®‡ßç‡¶§‡ßç‡¶∞‡¶£
    wheel((leftBaseSpeed + delSpeed), (rightBaseSpeed - delSpeed));
    
    prevError = error;       // ‡¶Ü‡¶ó‡ßá‡¶∞ error ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡ßã
  }
}
```

## üîß **‡¶ï‡ßÄ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶≤‡ßá ‡¶ï‡ßÄ ‡¶π‡¶¨‡ßá:**

### **‡ßß. Error value ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®:**
```cpp
if(error == 420) {  // ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶®
if(error == 300) {  // ‡¶¨‡ßá‡¶∂‡¶ø sensitive
if(error == 500) {  // ‡¶ï‡¶Æ sensitive
```
- **‡¶ï‡¶Æ value** = ‡¶¨‡ßá‡¶∂‡¶ø sensitive (‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ recovery)
- **‡¶¨‡ßá‡¶∂‡¶ø value** = ‡¶ï‡¶Æ sensitive (‡¶ß‡ßÄ‡¶∞ recovery)

### **‡ß®. Recovery speed ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®:**
```cpp
// ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶®:
wheel(-leftBaseSpeed, rightBaseSpeed);

// ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®:
wheel(-leftBaseSpeed*1.5, rightBaseSpeed*1.5);  //Êõ¥Âø´ recovery
wheel(-leftBaseSpeed*0.8, rightBaseSpeed*0.8);  //‡¶ß‡ßÄ‡¶∞ recovery
```

### **‡ß©. PID gains ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®:**
```cpp
// Proportional gain (kp)
P = kp * error;  // kp ‡¶¨‡¶æ‡ßú‡¶æ‡¶≤‡ßá ‡¶¨‡ßá‡¶∂‡¶ø aggressive

// Derivative gain (kd)  
D = kd * (error - prevError);  // kd ‡¶¨‡¶æ‡ßú‡¶æ‡¶≤‡ßá ‡¶¨‡ßá‡¶∂‡¶ø stable
```

### **‡ß™. Base speed ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®:**
```cpp
// ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶®:
wheel((leftBaseSpeed + delSpeed), (rightBaseSpeed - delSpeed));

// ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®:
wheel((leftBaseSpeed*1.2 + delSpeed), (rightBaseSpeed*1.2 - delSpeed)); //Êõ¥Âø´
wheel((leftBaseSpeed*0.8 + delSpeed), (rightBaseSpeed*0.8 - delSpeed)); //‡¶ß‡ßÄ‡¶∞
```

## üéØ **‡¶ï‡ßã‡¶°‡ßá‡¶∞ ‡¶ï‡¶æ‡¶ú ‡¶ï‡ßÄ:**

### **‡ßß. ‡¶≤‡¶æ‡¶á‡¶® ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶ó‡ßá‡¶≤‡ßá:**
- **PID control** ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶∏‡ßç‡¶Æ‡ßÅ‡¶•‡¶≠‡¶æ‡¶¨‡ßá ‡¶ö‡¶≤‡¶¨‡ßá
- **Error ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡¶Ø‡¶º‡ßÄ** speed adjust ‡¶ï‡¶∞‡¶¨‡ßá
- **‡¶∏‡ßã‡¶ú‡¶æ ‡¶•‡¶æ‡¶ï‡¶æ‡¶∞** ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡¶¨‡ßá

### **‡ß®. ‡¶≤‡¶æ‡¶á‡¶® ‡¶π‡¶æ‡¶∞‡¶æ‡¶≤‡ßá:**
- **‡¶∂‡ßá‡¶∑ known direction** ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡¶Ø‡¶º‡ßÄ ‡¶ò‡ßÅ‡¶∞‡¶¨‡ßá
- **‡¶≤‡¶æ‡¶á‡¶® ‡¶ñ‡ßÅ‡¶Å‡¶ú‡¶¨‡ßá**
- **Recovery ‡¶ï‡¶∞‡¶æ‡¶∞** ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡¶¨‡ßá

## ‚öôÔ∏è **‡¶ü‡¶ø‡¶â‡¶®‡¶ø‡¶Ç ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶â‡¶™‡¶æ‡¶Ø‡¶º:**

### **‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶á‡¶≤‡ßá:**
```cpp
float kp = 0.30;    // ‡¶¨‡¶æ‡ßú‡¶æ‡¶®‡ßã
float kd = 6.0;     // ‡¶¨‡¶æ‡ßú‡¶æ‡¶®‡ßã  
int leftBaseSpeed = 200;  // ‡¶¨‡¶æ‡ßú‡¶æ‡¶®‡ßã
int rightBaseSpeed = 200; // ‡¶¨‡¶æ‡ßú‡¶æ‡¶®‡ßã
```

### **‡¶∏‡ßç‡¶•‡¶ø‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶á‡¶≤‡ßá:**
```cpp
float kp = 0.20;    // ‡¶ï‡¶Æ‡¶æ‡¶®‡ßã
float kd = 3.0;     // ‡¶ï‡¶Æ‡¶æ‡¶®‡ßã
int leftBaseSpeed = 150;  // ‡¶ï‡¶Æ‡¶æ‡¶®‡ßã
int rightBaseSpeed = 150; // ‡¶ï‡¶Æ‡¶æ‡¶®‡ßã
```

### **Recoivery improve ‡¶ï‡¶∞‡¶§‡ßá:**
```cpp
if(error == 300) {  //Êõ¥‰Ωé error threshold
wheel(-leftBaseSpeed*1.3, rightBaseSpeed*1.3);  //Êõ¥Âø´ recovery
```

## üìä **Example Scenario:**

### **‡¶≤‡¶æ‡¶á‡¶® center ‡¶è ‡¶•‡¶æ‡¶ï‡¶≤‡ßá:**
```
error = 0
delSpeed = 0
wheel(200, 200)  // ‡¶∏‡ßã‡¶ú‡¶æ ‡¶ö‡¶≤‡ßã
```

### **‡¶≤‡¶æ‡¶á‡¶® ‡¶¨‡¶æ‡¶Æ‡ßá ‡¶•‡¶æ‡¶ï‡¶≤‡ßá:**
```
error = -1000 (‡¶¨‡¶æ‡¶Æ ‡¶¶‡¶ø‡¶ï‡ßá error)
delSpeed = -30 (‡¶¨‡¶æ‡¶Æ ‡¶Æ‡ßã‡¶ü‡¶∞ slow, ‡¶°‡¶æ‡¶® ‡¶Æ‡ßã‡¶ü‡¶∞ fast)
wheel(170, 230)  // ‡¶°‡¶æ‡¶® ‡¶¶‡¶ø‡¶ï‡ßá ‡¶ò‡ßÅ‡¶∞‡ßã
```

### **‡¶≤‡¶æ‡¶á‡¶® ‡¶π‡¶æ‡¶∞‡¶æ‡¶≤‡ßá:**
```
error = 420
lastSensor = 1 (‡¶∂‡ßá‡¶∑‡ßá ‡¶¨‡¶æ‡¶Æ‡ßá ‡¶õ‡¶ø‡¶≤)
wheel(-200, 200)  // ‡¶¨‡¶æ‡¶Æ ‡¶¶‡¶ø‡¶ï‡ßá ‡¶ò‡ßÅ‡¶∞‡ßã
```

initialization.ino





