void wheel(int leftSpeed, int rightSpeed){
  

  if(leftSpeed == 0){

    digitalWrite(inC, LOW);
    digitalWrite(inD, LOW);

  }

  if(leftSpeed > 0){

    digitalWrite(inC, HIGH);
    digitalWrite(inD, LOW);

  }

  else if(leftSpeed < 0){

    digitalWrite(inC, LOW);
    digitalWrite(inD, HIGH);

  }

  if(rightSpeed == 0){

    digitalWrite(inA, LOW);
    digitalWrite(inB, LOW);

  }

  if(rightSpeed > 0){

    digitalWrite(inB, HIGH);
    digitalWrite(inA, LOW);

  }

  else if(rightSpeed < 0){

    digitalWrite(inB, LOW);
    digitalWrite(inA, HIGH);

  }

  // digitalWrite(inB, HIGH);
  // digitalWrite(inC, HIGH);

  if(abs(leftSpeed)> maxSpeed) leftSpeed= maxSpeed;
  if(abs(rightSpeed)> maxSpeed) rightSpeed= maxSpeed;

  analogWrite(enA, abs(rightSpeed));
  analogWrite(enB, abs(leftSpeed));
  
}



**‡¶è‡¶á `wheel()` ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ü‡¶ø‡¶∞ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶è‡¶¨‡¶Ç ‡¶ï‡ßÄ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶≤‡ßá ‡¶ï‡ßÄ ‡¶π‡¶¨‡ßá:**

## üìù **‡¶ï‡ßã‡¶°‡ßá‡¶∞ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶Ö‡¶∞‡ßç‡¶•:**

```cpp
void wheel(int leftSpeed, int rightSpeed){
  
  // ‡¶¨‡¶æ‡¶Æ ‡¶Æ‡ßã‡¶ü‡¶∞ ‡¶ï‡¶®‡ßç‡¶ü‡ßç‡¶∞‡ßã‡¶≤
  if(leftSpeed == 0){               // ‡¶Ø‡¶¶‡¶ø ‡¶¨‡¶æ‡¶Æ ‡¶Æ‡ßã‡¶ü‡¶∞ ‡¶∏‡ßç‡¶™‡¶ø‡¶° 0 ‡¶π‡¶Ø‡¶º
    digitalWrite(inC, LOW);         // both pins LOW (stop)
    digitalWrite(inD, LOW);
  }

  if(leftSpeed > 0){                // ‡¶Ø‡¶¶‡¶ø ‡¶¨‡¶æ‡¶Æ ‡¶Æ‡ßã‡¶ü‡¶∞ positive ‡¶∏‡ßç‡¶™‡¶ø‡¶°
    digitalWrite(inC, HIGH);        // forward direction
    digitalWrite(inD, LOW);
  }

  else if(leftSpeed < 0){           // ‡¶Ø‡¶¶‡¶ø ‡¶¨‡¶æ‡¶Æ ‡¶Æ‡ßã‡¶ü‡¶∞ negative ‡¶∏‡ßç‡¶™‡¶ø‡¶°
    digitalWrite(inC, LOW);         // reverse direction  
    digitalWrite(inD, HIGH);
  }

  // ‡¶°‡¶æ‡¶® ‡¶Æ‡ßã‡¶ü‡¶∞ ‡¶ï‡¶®‡ßç‡¶ü‡ßç‡¶∞‡ßã‡¶≤
  if(rightSpeed == 0){              // ‡¶Ø‡¶¶‡¶ø ‡¶°‡¶æ‡¶® ‡¶Æ‡ßã‡¶ü‡¶∞ ‡¶∏‡ßç‡¶™‡¶ø‡¶° 0 ‡¶π‡¶Ø‡¶º
    digitalWrite(inA, LOW);         // both pins LOW (stop)
    digitalWrite(inB, LOW);
  }

  if(rightSpeed > 0){               // ‡¶Ø‡¶¶‡¶ø ‡¶°‡¶æ‡¶® ‡¶Æ‡ßã‡¶ü‡¶∞ positive ‡¶∏‡ßç‡¶™‡¶ø‡¶°
    digitalWrite(inB, HIGH);        // forward direction
    digitalWrite(inA, LOW);
  }

  else if(rightSpeed < 0){          // ‡¶Ø‡¶¶‡¶ø ‡¶°‡¶æ‡¶® ‡¶Æ‡ßã‡¶ü‡¶∞ negative ‡¶∏‡ßç‡¶™‡¶ø‡¶°
    digitalWrite(inB, LOW);         // reverse direction
    digitalWrite(inA, HIGH);
  }

  // ‡¶∏‡ßç‡¶™‡¶ø‡¶° ‡¶≤‡¶ø‡¶Æ‡¶ø‡¶ü‡¶ø‡¶Ç
  if(abs(leftSpeed) > maxSpeed) leftSpeed = maxSpeed;     // ‡¶¨‡¶æ‡¶Æ ‡¶Æ‡ßã‡¶ü‡¶∞ ‡¶∏‡ßç‡¶™‡¶ø‡¶° ‡¶≤‡¶ø‡¶Æ‡¶ø‡¶ü
  if(abs(rightSpeed) > maxSpeed) rightSpeed = maxSpeed;   // ‡¶°‡¶æ‡¶® ‡¶Æ‡ßã‡¶ü‡¶∞ ‡¶∏‡ßç‡¶™‡¶ø‡¶° ‡¶≤‡¶ø‡¶Æ‡¶ø‡¶ü

  // PWM ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶∏‡ßç‡¶™‡¶ø‡¶° ‡¶∏‡ßá‡¶ü
  analogWrite(enA, abs(rightSpeed));  // ‡¶°‡¶æ‡¶® ‡¶Æ‡ßã‡¶ü‡¶∞ ‡¶∏‡ßç‡¶™‡¶ø‡¶°
  analogWrite(enB, abs(leftSpeed));   // ‡¶¨‡¶æ‡¶Æ ‡¶Æ‡ßã‡¶ü‡¶∞ ‡¶∏‡ßç‡¶™‡¶ø‡¶°
}
```

## üéØ **‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ü‡¶ø‡¶∞ ‡¶ï‡¶æ‡¶ú:**

### **‡ßß. ‡¶Æ‡ßã‡¶ü‡¶∞ ‡¶¶‡¶ø‡¶ï ‡¶®‡¶ø‡¶Ø‡¶º‡¶®‡ßç‡¶§‡ßç‡¶∞‡¶£:**
- **Positive speed** ‚Üí ‡¶∏‡¶æ‡¶Æ‡¶®‡ßá‡¶∞ ‡¶¶‡¶ø‡¶ï‡ßá ‡¶ö‡¶≤‡¶æ
- **Negative speed** ‚Üí ‡¶™‡¶ø‡¶õ‡¶®‡ßá‡¶∞ ‡¶¶‡¶ø‡¶ï‡ßá ‡¶ö‡¶≤‡¶æ  
- **Zero speed** ‚Üí ‡¶•‡ßá‡¶Æ‡ßá ‡¶Ø‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ

### **‡ß®. ‡¶∏‡ßç‡¶™‡¶ø‡¶° ‡¶≤‡¶ø‡¶Æ‡¶ø‡¶ü‡¶ø‡¶Ç:**
- **maxSpeed** ‡¶è‡¶∞ ‡¶¨‡ßá‡¶∂‡¶ø ‡¶∏‡ßç‡¶™‡¶ø‡¶° allow ‡¶ï‡¶∞‡ßá ‡¶®‡¶æ
- **Safety feature** ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá

### **‡ß©. PWM ‡¶∏‡ßç‡¶™‡¶ø‡¶° ‡¶ï‡¶®‡ßç‡¶ü‡ßç‡¶∞‡ßã‡¶≤:**
- **analogWrite()** ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá smooth speed control

## üîß **‡¶ï‡ßÄ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶≤‡ßá ‡¶ï‡ßÄ ‡¶π‡¶¨‡ßá:**

### **‡ßß. ‡¶Æ‡ßã‡¶ü‡¶∞ ‡¶¶‡¶ø‡¶ï ‡¶â‡¶≤‡ßç‡¶ü‡¶æ‡¶®‡ßã:**
```cpp
// ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶´‡¶∞‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°:
digitalWrite(inC, HIGH);
digitalWrite(inD, LOW);

// ‡¶â‡¶≤‡ßç‡¶ü‡¶æ‡¶®‡ßã ‡¶´‡¶∞‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°:  
digitalWrite(inC, LOW);
digitalWrite(inD, HIGH);
```
- **Effect**: ‡¶Æ‡ßã‡¶ü‡¶∞ ‡¶¶‡¶ø‡¶ï ‡¶â‡¶≤‡ßç‡¶ü‡ßá ‡¶Ø‡¶æ‡¶¨‡ßá

### **‡ß®. ‡¶∏‡ßç‡¶™‡¶ø‡¶° ‡¶≤‡¶ø‡¶Æ‡¶ø‡¶ü ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®:**
```cpp
// ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶®:
if(abs(leftSpeed) > maxSpeed) leftSpeed = maxSpeed;

// ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®:
if(abs(leftSpeed) > maxSpeed) leftSpeed = maxSpeed * 0.9;  // 90% limit
```
- **Effect**:Êõ¥Âä† conservative speed limiting

### **‡ß©. Deadzone compensation:**
```cpp
// ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®:
if(abs(leftSpeed) < 50) leftSpeed = 0;  // Low speed ignore
if(abs(rightSpeed) < 50) rightSpeed = 0;
```
- **Effect**: Low speed ‡¶è motor chatter ‡¶ï‡¶Æ‡¶¨‡ßá

### **‡ß™. Acceleration limiting:**
```cpp
// ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®:
static int lastLeftSpeed = 0;
static int lastRightSpeed = 0;

leftSpeed = constrain(leftSpeed, lastLeftSpeed-20, lastLeftSpeed+20);
rightSpeed = constrain(rightSpeed, lastRightSpeed-20, lastRightSpeed+20);

lastLeftSpeed = leftSpeed;
lastRightSpeed = rightSpeed;
```
- **Effect**: Smooth acceleration/deceleration

## ‚öôÔ∏è **Motor Driver Truth Table:**

### **‡¶¨‡¶æ‡¶Æ ‡¶Æ‡ßã‡¶ü‡¶∞:**
| inC | inD | Result       |
|-----|-----|-------------|
| LOW | LOW | Brake/Stop  |
| HIGH| LOW | Forward     |
| LOW | HIGH| Reverse     |
| HIGH| HIGH| Short circuit (bad) |

### **‡¶°‡¶æ‡¶® ‡¶Æ‡ßã‡¶ü‡¶∞:**
| inA | inB | Result       |
|-----|-----|-------------|
| LOW | LOW | Brake/Stop  |
| LOW | HIGH| Forward     |
| HIGH| LOW | Reverse     |
| HIGH| HIGH| Short circuit (bad) |

## üöÄ **Usage Examples:**

### **‡¶∏‡¶æ‡¶Æ‡¶®‡ßá ‡¶Ø‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ:**
```cpp
wheel(200, 200);  // Both motors forward
```

### **‡¶™‡¶ø‡¶õ‡¶®‡ßá ‡¶Ø‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ:**
```cpp
wheel(-200, -200); // Both motors reverse
```

### **‡¶¨‡¶æ‡¶Æ‡ßá ‡¶ò‡ßã‡¶∞‡¶æ:**
```cpp
wheel(-150, 150);  // Left reverse, Right forward
```

### **‡¶°‡¶æ‡¶®‡ßá ‡¶ò‡ßã‡¶∞‡¶æ:**
```cpp
wheel(150, -150);  // Left forward, Right reverse
```

### **‡¶•‡ßá‡¶Æ‡ßá ‡¶Ø‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ:**
```cpp
wheel(0, 0);       // Both motors stop
```

## üîß **Improved Version:**

```cpp
void wheel(int leftSpeed, int rightSpeed){
  // Left motor direction
  if(leftSpeed == 0){
    digitalWrite(inC, LOW);
    digitalWrite(inD, LOW);
  }
  else if(leftSpeed > 0){
    digitalWrite(inC, HIGH);
    digitalWrite(inD, LOW);
  }
  else {
    digitalWrite(inC, LOW);
    digitalWrite(inD, HIGH);
  }

  // Right motor direction
  if(rightSpeed == 0){
    digitalWrite(inA, LOW);
    digitalWrite(inB, LOW);
  }
  else if(rightSpeed > 0){
    digitalWrite(inB, HIGH);
    digitalWrite(inA, LOW);
  }
  else {
    digitalWrite(inB, LOW);
    digitalWrite(inA, HIGH);
  }

  // Speed limiting with deadzone compensation
  leftSpeed = constrain(leftSpeed, -maxSpeed, maxSpeed);
  rightSpeed = constrain(rightSpeed, -maxSpeed, maxSpeed);
  
  // Apply minimum speed threshold
  if(abs(leftSpeed) < 30) leftSpeed = 0;
  if(abs(rightSpeed) < 30) rightSpeed = 0;

  analogWrite(enA, abs(rightSpeed));
  analogWrite(enB, abs(leftSpeed));
}
```

**‡¶è‡¶á ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ü‡¶øÈùûÂ∏∏ÈáçË¶Å** ‡¶ï‡¶æ‡¶∞‡¶£ ‡¶è‡¶ü‡¶ø directly ‡¶Æ‡ßã‡¶ü‡¶∞‡¶ó‡ßÅ‡¶≤‡¶ø‡¶ï‡ßá control ‡¶ï‡¶∞‡ßá! üöóüí®
