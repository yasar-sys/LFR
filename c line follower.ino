#define inA     A1
#define inB     A0
#define inC     A3
#define inD     A2
#define enA     11
#define enB     10

// #define inA     A0
// #define inB     A1
// #define inC     A2
// #define inD     A3
// #define enA     11
// #define enB     10

// #define inA     12
// #define inB     13
// #define inC     11
// #define inD     8
// #define enA     10
// #define enB     9

// int turn=0;

int leftBaseSpeed   =200; //80; 170 
int rightBaseSpeed  =200; //80; 170
int maxSpeed        =250; //80; 255

#define NUM_SENSORS    8

int sValues[NUM_SENSORS], lastSensor;

float kp            = 20; //6
float kd            = 26; //8
int prevError;

void initialize();
void lineFollow();
int readSensor();
void wheel();

void setup() {
  
  initialize();
  // Serial.begin(9600);
  // digitalWrite(inA, HIGH);
}

void loop() {

  
  lineFollow();
  

}



**ржПржЗ ржХрзЛржбржЯрж┐ ржПржХржЯрж┐ рж╕ржорзНржкрзВрж░рзНржг рж▓рж╛ржЗржи ржлрж▓рзЛрзЯрж╛рж░ рж░рзЛржмржЯрзЗрж░ ржЬржирзНржпред ржирж┐ржЪрзЗ ржмрж╛ржВрж▓рж╛рзЯ ржмрзНржпрж╛ржЦрзНржпрж╛ ржХрж░рж╛ рж╣рж▓рзЛ:**

## ЁЯУЭ **ржХрзЛржбрзЗрж░ ржмрж╛ржВрж▓рж╛ ржЕрж░рзНрже:**

```cpp
// ржорзЛржЯрж░ ржбрзНрж░рж╛ржЗржнрж╛рж░ ржкрж┐ржи ржбрзЗржлрж╛ржЗржи - Version 1
#define inA     A1    // ржмрж╛ржо ржорзЛржЯрж░ direction 1
#define inB     A0    // ржмрж╛ржо ржорзЛржЯрж░ direction 2  
#define inC     A3    // ржбрж╛ржи ржорзЛржЯрж░ direction 1
#define inD     A2    // ржбрж╛ржи ржорзЛржЯрж░ direction 2
#define enA     11    // ржмрж╛ржо ржорзЛржЯрж░ speed (PWM)
#define enB     10    // ржбрж╛ржи ржорзЛржЯрж░ speed (PWM)

// Alternative configurations (ржХржорзЗржирзНржЯ ржЖржЙржЯ ржХрж░рж╛)
// #define inA     A0
// #define inB     A1
// ... ржЕржирзНржпрж╛ржирзНржп ржХржиржлрж┐ржЧрж╛рж░рзЗрж╢ржи

// рж╕рзНржкрж┐ржб рж╕рзЗржЯрж┐ржВрж╕
int leftBaseSpeed   = 200;  // ржмрж╛ржо ржорзЛржЯрж░ ржмрзЗрж╕ рж╕рзНржкрж┐ржб
int rightBaseSpeed  = 200;  // ржбрж╛ржи ржорзЛржЯрж░ ржмрзЗрж╕ рж╕рзНржкрж┐ржб  
int maxSpeed        = 250;  // рж╕рж░рзНржмрзЛржЪрзНржЪ рж╕рзНржкрж┐ржб

#define NUM_SENSORS 8      // ржорзЛржЯ рж╕рзЗржирзНрж╕рж░ рж╕ржВржЦрзНржпрж╛

// ржЧрзНрж▓рзЛржмрж╛рж▓ ржнрзНржпрж╛рж░рж┐ржпрж╝рзЗржмрж▓
int sValues[NUM_SENSORS];  // рж╕рзЗржирзНрж╕рж░ ржнрзНржпрж╛рж▓рзБ ржЕрзНржпрж╛рж░рзЗ
int lastSensor;            // рж╢рзЗрж╖ рж╕рзЗржирзНрж╕рж░ ржЕржмрж╕рзНржерж╛ржи

// PID gains
float kp = 20;    // Proportional gain (ржЙржЪрзНржЪ ржорж╛ржи = aggressive)
float kd = 26;    // Derivative gain (ржЙржЪрзНржЪ ржорж╛ржи = stable)
int prevError;     // ржЖржЧрзЗрж░ error

// ржлрж╛ржВрж╢ржи ржбрж┐ржХрзНрж▓рж╛рж░рзЗрж╢ржи
void initialize();  // initialization ржлрж╛ржВрж╢ржи
void lineFollow();  // рж▓рж╛ржЗржи ржлрж▓рзЛ ржлрж╛ржВрж╢ржи  
int readSensor();   // рж╕рзЗржирзНрж╕рж░ ржкржбрж╝рж╛рж░ ржлрж╛ржВрж╢ржи
void wheel();       // ржорзЛржЯрж░ ржХржирзНржЯрзНрж░рзЛрж▓ ржлрж╛ржВрж╢ржи

void setup() {
  initialize();     // initialization ржХрж▓
  // Serial.begin(9600);  // Serial ржХржорж┐ржЙржирж┐ржХрзЗрж╢ржи (ржХржорзЗржирзНржЯ ржЖржЙржЯ)
}

void loop() {
  lineFollow();     // ╨╜╨╡╨┐╤А╨╡╤А╤Л╨▓ржнрж╛ржмрзЗ рж▓рж╛ржЗржи ржлрж▓рзЛ
}
```

## ЁЯОп **ржХрзЛржбрзЗрж░ ржорзВрж▓ ржХрж╛ржЬ:**

### **рзз. ржорзЛржЯрж░ ржХржирзНржЯрзНрж░рзЛрж▓:**
- **inA, inB** - ржмрж╛ржо ржорзЛржЯрж░рзЗрж░ ржжрж┐ржХ ржирж┐ржпрж╝ржирзНрждрзНрж░ржг
- **inC, inD** - ржбрж╛ржи ржорзЛржЯрж░рзЗрж░ ржжрж┐ржХ ржирж┐ржпрж╝ржирзНрждрзНрж░ржг
- **enA, enB** - ржорзЛржЯрж░рзЗрж░ speed ржирж┐ржпрж╝ржирзНрждрзНрж░ржг (PWM)

### **рзи. рж╕рзНржкрж┐ржб рж╕рзЗржЯрж┐ржВрж╕:**
- **leftBaseSpeed = 200** - ржмрж╛ржо ржорзЛржЯрж░ normal speed
- **rightBaseSpeed = 200** - ржбрж╛ржи ржорзЛржЯрж░ normal speed
- **maxSpeed = 250** - рж╕рж░рзНржмрзЛржЪрзНржЪ speed limit

### **рзй. PID ржХржирзНржЯрзНрж░рзЛрж▓:**
- **kp = 20** - Proportional gain (aggressive)
- **kd = 26** - Derivative gain (stable)

## ЁЯФз **ржХрзА ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рж▓рзЗ ржХрзА рж╣ржмрзЗ:**

### **рзз. рж╕рзНржкрж┐ржб ржмрж╛ржбрж╝рж╛рждрзЗ:**
```cpp
int leftBaseSpeed = 230;   // 200 -> 230
int rightBaseSpeed = 230;  // 200 -> 230
int maxSpeed = 255;        // 250 -> 255
```
- **Effect**: рж░рзЛржмржЯцЫ┤х┐л ржЪрж▓ржмрзЗ

### **рзи. рж╕рзНржкрж┐ржб ржХржорж╛рждрзЗ:**
```cpp
int leftBaseSpeed = 150;   // 200 -> 150  
int rightBaseSpeed = 150;  // 200 -> 150
int maxSpeed = 200;        // 250 -> 200
```
- **Effect**: рж░рзЛржмржЯ ржзрзАрж░рзЗ ржЪрж▓ржмрзЗ,цЫ┤хКа stable

### **рзй. PID gains ржкрж░рж┐ржмрж░рзНрждржи:**
```cpp
float kp = 15;  // 20 -> 15 (ржХржо aggressive)
float kd = 30;  // 26 -> 30 (цЫ┤хКа stable)
```
- **Effect**: smoother movement, less oscillation

### **я╝Ф. ржорзЛржЯрж░ ржкрж┐ржи ржХржиржлрж┐ржЧрж╛рж░рзЗрж╢ржи:**
```cpp
// Alternative configuration ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ:
// #define inA     A0  // uncomment ржХрж░рзБржи
// #define inB     A1
// ... etc.
```
- **Effect**: different motor driver pin configuration

## тЪЩя╕П **ржЯрж┐ржЙржирж┐ржВ ржХрж░рж╛рж░цМЗхНЧ:**

### **ржжрзНрж░рзБржд ржХрж┐ржирзНрждрзБ less stable:**
```cpp
float kp = 25;    //цЫ┤щлШ kp
float kd = 20;    //цЫ┤ф╜О kd  
int leftBaseSpeed = 220;
int rightBaseSpeed = 220;
```

### **ржзрзАрж░ ржХрж┐ржирзНрждрзБ more stable:**
```cpp
float kp = 15;    //цЫ┤ф╜О kp
float kd = 30;    //цЫ┤щлШ kd
int leftBaseSpeed = 180;  
int rightBaseSpeed = 180;
```

### **Competition optimized:**
```cpp
float kp = 20;    // Balanced kp
float kd = 26;    // Balanced kd
int leftBaseSpeed = 200;
int rightBaseSpeed = 200;
```

## ЁЯЪА **ржХрзЛржбржЯрж┐хжВф╜Хф╜┐чФи:**

### **рзз. Hardware connection:**
- **L298N motor driver** рж╕рж╛ржерзЗ connect ржХрж░рзБржи
- **IR sensor array** (8 sensors) connect ржХрж░рзБржи
- **рж╕ржарж┐ржХ power supply** ржжрж┐ржи

### **рзи. Calibration:**
- **kp ржПржмржВ kd** values track conditions ржЕржирзБржпрж╛ржпрж╝рзА adjust ржХрж░рзБржи
- **base speed**ца╣цНощЬАшжБ adjust ржХрж░рзБржи

### **рзй. Competition:**
- **maxSpeed** competition requirements ржЕржирзБржпрж╛ржпрж╝рзА set ржХрж░рзБржи
- **PID gains** fine-tune ржХрж░рзБржи optimal performance ржПрж░ ржЬржирзНржп

**ржПржЗ ржХрзЛржбржЯрж┐ ржПржХржЯрж┐ professional-level line follower!** ЁЯПЖ
